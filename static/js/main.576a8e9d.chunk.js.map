{"version":3,"sources":["logo.svg","GetDate.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","dodgerStyle","color","redStyle","whiteStyle","GetDate","_this","this","interval","setInterval","setState","clearInterval","today","Date","getTime","year","getFullYear","distance","days","Math","floor","hours","mins","secs","react_default","a","createElement","className","style","concat","title","alt","src","frameborder","Component","btnStyles","makeStyles","theme","button","margin","spacing","App","logo","GetDate_GetDate","Button","variant","startIcon","Icon","href","target","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","headers","Service-Worker","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.576a8e9d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d8fb0274.svg\";","import React, { Component } from 'react';\r\n\r\nconst dodgerStyle = { color: \"DodgerBlue\" };\r\nconst redStyle = { color: \"#f50057\"};\r\nconst whiteStyle = { color: \"white\"};\r\n\r\nexport default class GetDate extends Component {\r\n    // Setting the interval so the counter counts down\r\n    componentDidMount() {\r\n        this.interval = setInterval(() => this.setState({}), 1000);\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    render() {\r\n        // Get current date\r\n        let today = new Date().getTime();\r\n        let year = new Date().getFullYear();\r\n    \r\n        // Get 2021 new years date\r\n        let theGreat2021 = new Date(\"Jan 1, 2021 00:00:00\").getTime();\r\n        \r\n        // Calculate the difference\r\n        let distance = theGreat2021 - today;\r\n        \r\n        let days = Math.floor(distance / (1000 * 60 * 60 * 24));\r\n        let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n        let mins = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n        let secs = Math.floor((distance % (1000 * 60)) / 1000);\r\n    \r\n        if (year === 2020) {\r\n            return (\r\n                <div className=\"App-content\">\r\n                    <h2>2020 has been not so great... so here's a countdown to (hopefully) a better year.</h2>\r\n                    <h2 style={whiteStyle}>\r\n                        {`${days} `} <span style={redStyle}>days </span>\r\n                        {`${hours} `} <span style={redStyle}>hours<br /></span>\r\n                        {`${mins} `} <span style={dodgerStyle}>mins </span>\r\n                        {`${secs} `} <span style={dodgerStyle}>secs<br /></span>\r\n                    </h2>\r\n                    <h6>#2020IsOverParty</h6>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"App-content\">\r\n                    <h1>#2020IsOverParty</h1>\r\n                    <h2>Finally, 2020 is over. I'm sure the world is doing great now!</h2>\r\n                    <iframe title=\"WeDidIt\" alt=\"2020IsNowOverVideo\" src=\"https://www.youtube.com/embed/0FODZB3ofKo?autoplay=1&loop=1\" frameborder=\"0\"></iframe>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GetDate from './GetDate';\n\nconst btnStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <GetDate/>\n        <Button\n          className={btnStyles().button}\n          variant=\"contained\"\n          color=\"secondary\"\n          startIcon={<Icon>home</Icon>}\n          href=\"http://danbullock.me\"\n          target=\"_blank\">\n          My Website\n        </Button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}